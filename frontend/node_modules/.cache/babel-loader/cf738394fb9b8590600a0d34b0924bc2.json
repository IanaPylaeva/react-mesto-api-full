{"ast":null,"code":"/*\r\nclass Api {\r\n  constructor(options) {\r\n    this._serverUrl = options.serverUrl;\r\n    this._headers = options.headers;\r\n  };\r\n\r\n  /* Ответ от сервера всегда проверяется на корректность \r\n  _checkCorrectness(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    // если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  };\r\n  \r\n  /* Получить карточки с сервера \r\n  getInitialCards() {\r\n    return fetch(`${this._serverUrl}/cards`, {\r\n      method: 'GET',\r\n      headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n \r\n  /* Получить информацию о пользователе с сервера \r\n  getUserData() {\r\n    return fetch(`${this._serverUrl}/users/me`, {\r\n      method: 'GET',\r\n      headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Установить обновленные данные пользователя на сервер \r\n  patchUserInfo(data) {\r\n    return fetch(`${this._serverUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        about: data.about,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Установить аватар пользователя на сервере \r\n  patchUserAvatar(data) {\r\n    return fetch(`${this._serverUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: data.avatar,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Отправить данные новой карточки на сервер \r\n  postCard(card) {\r\n    return fetch(`${this._serverUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: card.name,\r\n        link: card.link,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Удалить карточку с сервера \r\n  deleteCard(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}`, {\r\n    method: 'DELETE',\r\n    headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Поставить лайк \r\n  putLike(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\r\n    method: 'PUT',\r\n    headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Удалить лайк \r\n  deleteLike(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\r\n    method: 'DELETE',\r\n    headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n};\r\n\r\nexport const api = new Api({\r\n  serverUrl: 'https://domain.IanaPylaeva.bcknd.nomoredomains.xyz',//Адрес сервера проекта Mesto\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n})\r\n\r\n\r\n\r\n*/\nclass Api {\n  constructor(options) {\n    this._serverUrl = options.serverUrl;\n    this._headers = options.headers;\n  }\n\n  /* Ответ от сервера всегда проверяется на корректность */\n  _checkCorrectness(res) {\n    if (res.ok) {\n      return res.json();\n    } // если ошибка, отклоняем промис\n\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  _getHeaders() {\n    const jwt = localStorage.getItem('jwt');\n    return {\n      authorization: `Bearer ${jwt}`,\n      ...this._headers\n    };\n  }\n  /* Получить карточки с сервера */\n\n\n  getInitialCards() {\n    return fetch(`${this._serverUrl}/cards`, {\n      method: 'GET',\n      headers: this._getHeaders()\n    }).then(this._checkCorrectness);\n  }\n\n  /* Получить информацию о пользователе с сервера */\n  getUserData() {\n    return fetch(`${this._serverUrl}/users/me`, {\n      method: 'GET',\n      headers: this._getHeaders()\n    }).then(this._checkCorrectness);\n  }\n\n  /* Установить обновленные данные пользователя на сервер */\n  patchUserInfo(data) {\n    return fetch(`${this._serverUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkCorrectness);\n  }\n\n  /* Установить аватар пользователя на сервере */\n  patchUserAvatar(data) {\n    return fetch(`${this._serverUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkCorrectness);\n  }\n\n  /* Отправить данные новой карточки на сервер */\n  postCard(card) {\n    return fetch(`${this._serverUrl}/cards`, {\n      method: 'POST',\n      headers: this._getHeaders(),\n      body: JSON.stringify({\n        name: card.name,\n        link: card.link\n      })\n    }).then(this._checkCorrectness);\n  }\n\n  /* Удалить карточку с сервера */\n  deleteCard(id) {\n    return fetch(`${this._serverUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._getHeaders()\n    }).then(this._checkCorrectness);\n  }\n\n  /* Поставить лайк */\n  putLike(id) {\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: this._getHeaders()\n    }).then(this._checkCorrectness);\n  }\n\n  /* Удалить лайк */\n  deleteLike(id) {\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: this._getHeaders()\n    }).then(this._checkCorrectness);\n  }\n\n}\n\n;\nexport const api = new Api({\n  serverUrl: 'https://domain.IanaPylaeva.bcknd.nomoredomains.xyz',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["C:/Users/пользователь/dev/react-mesto-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","options","_serverUrl","serverUrl","_headers","headers","_checkCorrectness","res","ok","json","Promise","reject","status","_getHeaders","jwt","localStorage","getItem","authorization","getInitialCards","fetch","method","then","getUserData","patchUserInfo","data","body","JSON","stringify","name","about","patchUserAvatar","avatar","postCard","card","link","deleteCard","id","putLike","deleteLike","api"],"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","sourcesContent":["/*\r\nclass Api {\r\n  constructor(options) {\r\n    this._serverUrl = options.serverUrl;\r\n    this._headers = options.headers;\r\n  };\r\n\r\n  /* Ответ от сервера всегда проверяется на корректность \r\n  _checkCorrectness(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    // если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  };\r\n  \r\n  /* Получить карточки с сервера \r\n  getInitialCards() {\r\n    return fetch(`${this._serverUrl}/cards`, {\r\n      method: 'GET',\r\n      headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n \r\n  /* Получить информацию о пользователе с сервера \r\n  getUserData() {\r\n    return fetch(`${this._serverUrl}/users/me`, {\r\n      method: 'GET',\r\n      headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Установить обновленные данные пользователя на сервер \r\n  patchUserInfo(data) {\r\n    return fetch(`${this._serverUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        about: data.about,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Установить аватар пользователя на сервере \r\n  patchUserAvatar(data) {\r\n    return fetch(`${this._serverUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: data.avatar,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Отправить данные новой карточки на сервер \r\n  postCard(card) {\r\n    return fetch(`${this._serverUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: card.name,\r\n        link: card.link,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Удалить карточку с сервера \r\n  deleteCard(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}`, {\r\n    method: 'DELETE',\r\n    headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Поставить лайк \r\n  putLike(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\r\n    method: 'PUT',\r\n    headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Удалить лайк \r\n  deleteLike(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\r\n    method: 'DELETE',\r\n    headers: this._headers,\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n};\r\n\r\nexport const api = new Api({\r\n  serverUrl: 'https://domain.IanaPylaeva.bcknd.nomoredomains.xyz',//Адрес сервера проекта Mesto\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n})\r\n\r\n\r\n\r\n*/\r\n\r\nclass Api {\r\n  constructor(options) {\r\n    this._serverUrl = options.serverUrl;\r\n    this._headers = options.headers;\r\n  };\r\n\r\n  /* Ответ от сервера всегда проверяется на корректность */\r\n  _checkCorrectness(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    // если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  };\r\n  \r\n  _getHeaders(){\r\n    const jwt = localStorage.getItem('jwt');\r\n    return {authorization: `Bearer ${jwt}`, ...this._headers}\r\n  }\r\n\r\n  /* Получить карточки с сервера */\r\n  getInitialCards() {\r\n    return fetch(`${this._serverUrl}/cards`, {\r\n      method: 'GET',\r\n      headers: this._getHeaders(),\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n \r\n  /* Получить информацию о пользователе с сервера */\r\n  getUserData() {\r\n    return fetch(`${this._serverUrl}/users/me`, {\r\n      method: 'GET',\r\n      headers: this._getHeaders(),\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Установить обновленные данные пользователя на сервер */\r\n  patchUserInfo(data) {\r\n    return fetch(`${this._serverUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._getHeaders(),\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        about: data.about,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Установить аватар пользователя на сервере */\r\n  patchUserAvatar(data) {\r\n    return fetch(`${this._serverUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._getHeaders(),\r\n      body: JSON.stringify({\r\n        avatar: data.avatar,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Отправить данные новой карточки на сервер */\r\n  postCard(card) {\r\n    return fetch(`${this._serverUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: this._getHeaders(),\r\n      body: JSON.stringify({\r\n        name: card.name,\r\n        link: card.link,\r\n      })\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Удалить карточку с сервера */\r\n  deleteCard(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}`, {\r\n    method: 'DELETE',\r\n    headers: this._getHeaders(),\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Поставить лайк */\r\n  putLike(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\r\n    method: 'PUT',\r\n    headers: this._getHeaders(),\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n\r\n  /* Удалить лайк */\r\n  deleteLike(id) {\r\n    return fetch(`${this._serverUrl}/cards/${id}/likes`, {\r\n    method: 'DELETE',\r\n    headers: this._getHeaders(),\r\n    })\r\n    .then(this._checkCorrectness);\r\n  };\r\n};\r\n\r\nexport const api = new Api({\r\n  serverUrl: 'https://domain.IanaPylaeva.bcknd.nomoredomains.xyz',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n})"]},"metadata":{},"sourceType":"module"}